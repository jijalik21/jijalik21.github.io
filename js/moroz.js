$(document).ready(function(){function t(t){return Array.prototype.slice.call(t)}function n(n){return n.map(function(n){return t(n)})}function e(t,e){for(var r=0;r<t.length;r++)s.push(n(t)[r].map(function(t){return"INPUT"===t.tagName&&t}).filter(Boolean).map(function(t){return"true"===t.value?1:0})),m.push(n(t)[r].map(function(t){return"INPUT"===t.tagName&&t}).filter(Boolean).map(function(t){return t.checked?1:0}));c.push(i.map(function(t){return t.value}))}function r(){var t=u(s),n=u(m);f=[];for(var e=0;e<i.length;e++)p[e]===c[0][e]?f.push(1):f.push(0);for(var r=0;r<l.length;r++){for(var o=0,a=0;a<=s[r].length-1;a++)s[r][a]===m[r][a]&&0!==s[r][a]&&(o+=1);o<=t[r]&&0!==o&&n[r]<=t[r]?f.push(o/t[r]):f.push(0)}}function u(t){return t.map(function(t){return t.reduce(function(t,n){return t+n})})}function o(t){return t=t.reduce(function(t,n){return t+n}).toString(),L=t.length,"1"===t[L-2]?" балів":"2"===t[L-1]||"3"===t[L-1]||"4"===t[L-1]?" бала":"1"===t[L-1]?" бал":" балів"}$("#submit").on("click",function(){document.location.href="http://localhost:9000/inner_pages/marks.html"});var a=window.location.href;if("http://localhost:9000/inner_pages/practice.html"===a){var i=[],c=[],l=[],s=[],m=[],f=[],p=["ахмад","альтиметр","авіатор","гугл","хобі","хаскі","інтернет","менеджмент","маніпуляція","медіа плеєр","московський","орт","перфоратор","платформа","ресурс","спешіал сістем індастрі","тег","турбогенератор","відео","зара"],h=document.getElementById("submit");h.addEventListener("click",function(n){n.preventDefault(),s=[],m=[],i=document.getElementsByName("transliteration"),l=document.getElementsByClassName("question-wrap"),i=t(t(i)),l=t(t(l).map(function(t){return t.childNodes})),e(l,i),r(f),f=f.reduce(function(t,n){return t+n})+o(f)+" з 80",window.sessionStorage.setItem("myResult",f)},!1)}else if("http://localhost:9000/inner_pages/marks.html"===a){var d=window.sessionStorage.getItem("myResult");document.getElementById("final-mark").innerText=d+""}});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
